#!/usr/bin/env bash

set -e

# returns dokman directory
readonly DOKMAN_RELATIVE_PATH=$(dirname "${BASH_SOURCE[0]}")

readonly DOKMAN_SCRIPT_DIR=$(cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd)
# install everything in parent folder
readonly installPath=$(dirname "${DOKMAN_RELATIVE_PATH}")

readonly DOKMAN_DIR_NAME=$(basename "${DOKMAN_SCRIPT_DIR}")

source "${DOKMAN_SCRIPT_DIR}/autoload.sh"

####################################################################
####################################################################
# Configuration
####################################################################

readonly folders=(
    services
    services/links
    services/ports
    configurations
    environments
    images
    scripts
)

readonly files=(
    .env.dist
    .env
)

readonly templateScripts=(
    .install.sh
)

readonly symlinkScripts=(
    env
    run
    enter
    install
)

readonly gitIgnore=(
    "# exclude man .env file"
    /.env
    "# exclude all environments specific .env files"
    /environments/*/.env
)

####################################################################
####################################################################
# Install logic
####################################################################

title "Installing dockman!"

readonly DOKMAN_PROJECT_NAME=$(questionForceNotEmptyResponse "Project name" "Project name can not be empty string")

title "Setup directories if needed..."

# setup directories if needed
for directory in "${folders[@]}"
do
    label=$(foregroundColor "${directory}" "yellow")
	if [ ! -d "${installPath}/${directory}" ]; then
        mkdir "${installPath}/${directory}"
        success "Created directory ${label}"
    else
        info "Directory ${label} already exists, skipping!"
    fi
done

title "Setup files if needed..."

# setup empty files if needed
for file in "${files[@]}"
do
    label=$(foregroundColor "${file}" "yellow")
	if [ ! -f "${installPath}/${file}" ]; then
        touch "${installPath}/${file}"
        success "Created file ${label}"
    else
        info "File ${label} already exists, skipping!"
    fi
done

title "Setup .gitignore if needed..."

# setup git ignore file if needed
label=$(foregroundColor ".gitignore" "yellow")
if [ ! -f "${installPath}/.gitignore" ]; then
    touch "${installPath}/.gitignore"
    success "Created file ${label}"
    for line in "${gitIgnore[@]}"
    do
        echo "${line}" >> "${installPath}/.gitignore"
    done
else
    info "File ${label} already exists, skipping!"
fi

title "Copying template scripts if needed..."

# setup files from templates
for templateScript in "${templateScripts[@]}"
do
    pathToScript="${installPath}/${templateScript}"
    label=$(foregroundColor "${templateScript}" "yellow")
    if [ ! -f "${pathToScript}" ]; then
        scriptContent=$(cat "${DOKMAN_SCRIPT_DIR}/templates/${templateScript}")

        # setup template files
        createFile "${pathToScript}" "${scriptContent}"
        success "Copied template file ${label}"
    else
        info "File ${label} already exists, skipping!"
    fi
done

title "Symlinking scripts if needed..."

for symlinkScript in "${symlinkScripts[@]}"
do
    pathToScript="${installPath}/${symlinkScript}"
    label=$(foregroundColor "${symlinkScript}" "yellow")
    if [ ! -L "${pathToScript}" ]; then
        ln -s "${DOKMAN_DIR_NAME}/bin/${symlinkScript}" "${pathToScript}"
        success "Symlink for file ${label} created"
    else
        info "Symlink ${label} already exists, skipping!"
    fi
done

title "Setting project name..."

echo "COMPOSE_PROJECT_NAME=${DOKMAN_PROJECT_NAME}" > "${installPath}/.env.dist"
success "Variable COMPOSE_PROJECT_NAME set as $(foregroundColor "${DOKMAN_PROJECT_NAME}" "yellow") in .env.dist configuration"


success "Installation done!"
